# Multi-stage build for compliance-server
# This builds the Go binary from source inside Docker (Linux environment)

FROM golang:1.24-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git gcc musl-dev

WORKDIR /build

# Copy go mod files
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build the server binary
RUN CGO_ENABLED=1 GOOS=linux go build -ldflags="-s -w" -o compliance-server ./cmd/compliance-server

# Final stage - minimal runtime image
FROM alpine:latest

# Install runtime dependencies
RUN apk add --no-cache ca-certificates tzdata wget

# Create non-root user
RUN addgroup -g 1000 compliance && \
    adduser -D -u 1000 -G compliance compliance

# Create necessary directories
RUN mkdir -p /app/data /app/certs /app/logs && \
    chown -R compliance:compliance /app

WORKDIR /app

# Copy binary from builder
COPY --from=builder /build/compliance-server .

# Copy HTML templates (needed for serving web pages)
COPY --from=builder /build/cmd/compliance-server/*.html .

# Copy JWT test page and static files (JS, CSS, etc.)
COPY --from=builder /build/jwt-test.html .
COPY --from=builder /build/static ./static

# Copy configs directory (for policy import)
COPY --from=builder /build/configs ./configs

# Copy entrypoint script from docker directory
COPY --from=builder /build/docker/docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh && \
    chown compliance:compliance /usr/local/bin/docker-entrypoint.sh

# Switch to non-root user
USER compliance

# Expose ports
EXPOSE 8080 8443

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:${SERVER_PORT:-8080}/ || exit 1

# Set entrypoint
ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["./compliance-server"]
